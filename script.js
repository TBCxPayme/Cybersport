// –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è 1/2 –º–µ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø –≤ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—ã –∏ —Ñ–∏–Ω–∞–ª
async function init() {
  try {
    const r = await fetch('data.json?nocache=' + Date.now());
    const data = await r.json();
    renderTournament(data.rounds);
  } catch (e) {
    const bracket = document.getElementById('bracket');
    bracket.innerHTML = '<p style="color:#ff7777">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.json</p>';
    console.error(e);
  }
}

function calcStandings(groupMatches) {
  // groupMatches: 3 –º–∞—Ç—áa, 3 –∫–æ–º–∞–Ω–¥—ã
  const teams = {};
  groupMatches.forEach(m => {
    const a = m.teamA || '';
    const b = m.teamB || '';
    if(!teams[a]) teams[a] = { name: a, pts:0, gd:0, gf:0 };
    if(!teams[b]) teams[b] = { name: b, pts:0, gd:0, gf:0 };
    // scores may be numbers or strings
    const sa = Number(m.scoreA);
    const sb = Number(m.scoreB);
    teams[a].gf += sa;
    teams[b].gf += sb;
    teams[a].gd += (sa - sb);
    teams[b].gd += (sb - sa);
    if(sa > sb) teams[a].pts += 3;
    else if(sb > sa) teams[b].pts += 3;
    else { teams[a].pts += 1; teams[b].pts += 1; }
  });
  const arr = Object.values(teams);
  // sort: pts desc, gd desc, gf desc, name asc
  arr.sort((x,y) => {
    if(y.pts !== x.pts) return y.pts - x.pts;
    if(y.gd !== x.gd) return y.gd - x.gd;
    if(y.gf !== x.gf) return y.gf - x.gf;
    return x.name.localeCompare(y.name,'ru');
  });
  return arr;
}

function renderTournament(rounds) {
  const bracket = document.getElementById('bracket');
  const champEl = document.getElementById('champion');
  bracket.innerHTML = '';
  champEl.textContent = '';

  // —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø (–ø–µ—Ä–≤—ã–µ 2 –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã)
  const groupStandings = [];

  rounds.forEach((round, rIdx) => {
    const roundEl = document.createElement('div'); roundEl.className='round';
    const title = document.createElement('h3'); title.textContent = round.name; roundEl.appendChild(title);

    // –≥—Ä—É–ø–ø—ã (–ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Ä–∞—É–Ω–¥–∞ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≥—Ä—É–ø–ø–∞–º–∏)
    if(round.name.toLowerCase().includes('–≥—Ä—É–ø–ø–∞')) {
      // —Ä–µ–Ω–¥–µ—Ä–∏–º –º–∞—Ç—á–∏
      round.matches.forEach((m)=>{
        const matchEl = document.createElement('div'); matchEl.className='match';
        const teamA = document.createElement('div'); teamA.className='team'; teamA.textContent = `${m.teamA} (${m.scoreA})`;
        const teamB = document.createElement('div'); teamB.className='team'; teamB.textContent = `${m.teamB} (${m.scoreB})`;
        // winner highlight
        const sa = Number(m.scoreA); const sb = Number(m.scoreB);
        if(!isNaN(sa) && !isNaN(sb)){
          if(sa > sb) teamA.classList.add('winner');
          else if(sb > sa) teamB.classList.add('winner');
        }
        matchEl.appendChild(teamA); matchEl.appendChild(teamB); roundEl.appendChild(matchEl);
      });

      // standings table
      const standings = calcStandings(round.matches);
      groupStandings.push(standings);
      const table = document.createElement('table'); table.className='table';
      table.innerHTML = `<thead><tr><th>#</th><th>–ö–æ–º–∞–Ω–¥–∞</th><th>–û—á–∫–∏</th><th>–ó–ú</th><th>–†–∞–∑–Ω.</th></tr></thead>`;
      const tbody = document.createElement('tbody');
      standings.forEach((t,i)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `<td>${i+1}</td><td>${t.name}</td><td>${t.pts}</td><td>${t.gf}</td><td>${t.gd}</td>`;
        tbody.appendChild(tr);
      });
      table.appendChild(tbody);
      roundEl.appendChild(table);
    } else {
      // –ø–ª–µ–π-–æ—Ñ—Ñ ‚Äî –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –º–∞—Ç—á–∏ (–∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å)
      round.matches.forEach((m)=>{
        const matchEl = document.createElement('div'); matchEl.className='match';
        const teamA = document.createElement('div'); teamA.className='team'; teamA.textContent = `${m.teamA} (${m.scoreA})`;
        const teamB = document.createElement('div'); teamB.className='team'; teamB.textContent = `${m.teamB} (${m.scoreB})`;
        const sa = Number(m.scoreA); const sb = Number(m.scoreB);
        if(!isNaN(sa) && !isNaN(sb)){
          if(sa > sb) teamA.classList.add('winner');
          else if(sb > sa) teamB.classList.add('winner');
        }
        matchEl.appendChild(teamA); matchEl.appendChild(teamB); roundEl.appendChild(matchEl);
      });
    }

    bracket.appendChild(roundEl);
  });

  // –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  // –æ–∂–∏–¥–∞–µ–º: groupStandings[0] ‚Äî –ì—Ä—É–ø–ø–∞ A, [1] ‚Äî –ì—Ä—É–ø–ø–∞ B
  if(groupStandings.length >= 2){
    const gA = groupStandings[0];
    const gB = groupStandings[1];

    // 1A vs 2B -> SF1
    const sf1 = rounds.find(r => r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω') || r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω–∞–ª'))?.matches?.[0];
    const sf2 = rounds.find(r => r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω') || r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω–∞–ª'))?.matches?.[1];
    const pfRound = rounds.find(r => r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω') || r.name.toLowerCase().includes('–ø–æ–ª—É—Ñ–∏–Ω–∞–ª'));
    if(pfRound){
      pfRound.matches[0].teamA = gA[0]?.name || '1A';
      pfRound.matches[0].teamB = gB[1]?.name || '2B';
      pfRound.matches[1].teamA = gB[0]?.name || '1B';
      pfRound.matches[1].teamB = gA[1]?.name || '2A';
    }

    // –µ—Å–ª–∏ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—ã —É–∂–µ —Å—ã–≥—Ä–∞–Ω—ã ‚Äî –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª
    const final = rounds[rounds.length -1];
    if(final && final.matches && final.matches[0]){
      const sfRound = pfRound;
      const sfm0 = sfRound.matches[0];
      const sfm1 = sfRound.matches[1];
      const w1 = (Number(sfm0.scoreA) > Number(sfm0.scoreB)) ? sfm0.teamA : (Number(sfm0.scoreB) > Number(sfm0.scoreA) ? sfm0.teamB : null);
      const w2 = (Number(sfm1.scoreA) > Number(sfm1.scoreB)) ? sfm1.teamA : (Number(sfm1.scoreB) > Number(sfm1.scoreA) ? sfm1.teamB : null);
      // –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º –≤ —Ñ–∏–Ω–∞–ª
      if(w1) final.matches[0].teamA = w1;
      else final.matches[0].teamA = final.matches[0].teamA || 'Winner SF1';
      if(w2) final.matches[0].teamB = w2;
      else final.matches[0].teamB = final.matches[0].teamB || 'Winner SF2';
    }
  }

  // –æ–±–Ω–æ–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑ (—á—Ç–æ–±—ã –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–ª–µ–π-–æ—Ñ—Ñ –∏–º–µ–Ω–∞)
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º –≤–∏–∑—É–∞–ª –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞:
  // (—ç—Ç–æ—Ç –æ–±—Ö–æ–¥ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ rounds –≤ DOM)
  // –ù–æ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –ø–ª–µ–π-–æ—Ñ—Ñ —á–∞—Å—Ç–∏:
  // (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—à–µ –æ–±–Ω–æ–≤–∏–ª–∞ rounds –≤ –ø–∞–º—è—Ç–∏, –Ω–æ —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –≤—ã–∑–æ–≤—ë–º —Å–Ω–æ–≤–∞ render)
  // –£–ø—Ä–æ—â—ë–Ω–Ω–æ: –≤—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ —Ñ–∏–Ω–∞–ª –∏ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª—ã –ø–æ–∫–∞–∂—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
  // (–û–±—ã—á–Ω–æ –º–æ–∂–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —á–∏—â–µ ‚Äî –Ω–æ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –æ–¥–∏–Ω —Ä–∞–∑.)
  // –°–æ–±–µ—Ä—ë–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Å—É–µ–º —Å–Ω–æ–≤–∞ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º:
  // (–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
  // ‚Äî —Å–æ–∑–¥–∞–¥–∏–º shallow copy –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç—Ä–∏—Å—É–µ–º
  // Prevent infinite loop: only run once by checking a flag
  if(!window.__renderedOnce) {
    window.__renderedOnce = true;
    // slight timeout to avoid sync reentry issues
    setTimeout(()=> renderTournament(rounds), 10);
    return;
  }

  // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á–µ–º–ø–∏–æ–Ω–∞, –µ—Å–ª–∏ —Ñ–∏–Ω–∞–ª —Å—ã–≥—Ä–∞–Ω
  const finalRound = rounds[rounds.length -1];
  if(finalRound && finalRound.matches && finalRound.matches[0]){
    const fm = finalRound.matches[0];
    const fa = Number(fm.scoreA), fb = Number(fm.scoreB);
    if(!isNaN(fa) && !isNaN(fb)){
      if(fa > fb) champEl.textContent = `‚Äî ${fm.teamA} üèÜ`;
      else if(fb > fa) champEl.textContent = `‚Äî ${fm.teamB} üèÜ`;
    }
  }
}

document.addEventListener('DOMContentLoaded', init);
